{"version":3,"sources":["mdPickers.min.js"],"names":["DatePickerCtrl","$scope","$mdDialog","$mdMedia","$timeout","currentDate","options","self","this","date","moment","minDate","isValid","maxDate","displayFormat","dateFilter","angular","isFunction","confirmText","cancelText","selectingYear","isBefore","add","isAfter","yearItems","currentIndex_","PAGE_SIZE","START","year","END","getItemAtIndex","index","getLength","Math","min","floor","abs","selectYear","animate","showYear","yearTopIndex","showCalendar","cancel","confirm","hide","toDate","animating","noop","then","CalendarCtrl","dow","localeData","firstDayOfWeek","weekDays","concat","weekdaysMin","slice","daysInMonth","getDaysInMonth","days","firstDay","day","length","arr","i","value","enabled","isDayEnabled","push","selectDate","dom","nextMonth","prevMonth","subtract","updateDaysInMonth","$watch","unix","newValue","oldValue","formatValidator","format","isDate","minDateValidator","isSameOrAfter","maxDateValidator","isSameOrBefore","filterValidator","filter","TimePickerCtrl","time","autoSwitch","ampm","VIEW_HOURS","VIEW_MINUTES","currentView","hoursFormat","minutesFormat","clockHours","parseInt","clockMinutes","switchView","setAM","hours","hour","setPM","ClockCtrl","TYPE_HOURS","TYPE_MINUTES","STEP_DEG","steps","CLOCK_TYPES","range","minutes","getPointerStyle","divider","type","degrees","round","selected","-webkit-transform","-ms-transform","transform","setTimeByDeg","deg","setTime","init","f","t","module","config","$mdIconProvider","mdpIconsRegistry","forEach","icon","id","url","run","$templateCache","put","svg","constant","directive","$mdUtil","restrict","priority","compile","element","inputContainer","getClosest","toggleClass","provider","DISPLAY_FORMAT","$get","datePicker","Date","now","isObject","show","controller","controllerAs","clickOutsideToClose","template","targetEvent","locals","skipHide","$animate","bindToController","link","scope","attrs","ctrl","animElements","querySelector","map","a","direction","addClass","removeClass","$mdpDatePicker","require","transclude","noFloat","isDefined","mdpNoFloat","placeholder","mdpPlaceholder","openOnClick","mdpOpenOnClick","mdpDisabled","dateFormat","disabled","pre","ngModel","$transclude","post","updateInputElement","inputElement","inputContainerCtrl","setHasValue","$isEmpty","updateDate","strValue","$setViewValue","$pristine","messages","hasClass","$render","onInputElementEvents","event","target","$viewVaue","clone","append","model","isError","$invalid","$formatters","unshift","$validators","modelValue","viewValue","required","isUndefined","$parsers","parsed","$modelValue","originalModel","month","showPicker","ev","on","$on","off","replace","timepickerCtrl","$parent","timepicker","onEvent","containerCoords","currentTarget","getClientRects","x","offsetWidth","pageX","left","y","pageY","top","offsetHeight","atan2","PI","indexOf","e","timePicker","$mdpTimePicker","timeFormat","updateTime","$error","setInvalid","Object","keys","seconds"],"mappings":"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","file":"mdPickers.min.js","sourcesContent":["(function() {\n\"use strict\";\n/* global moment, angular */\r\n\r\nvar module = angular.module(\"mdPickers\", [\r\n\t\"ngMaterial\",\r\n\t\"ngAnimate\",\r\n\t\"ngAria\"\r\n]);\r\n\r\nmodule.config([\"$mdIconProvider\", \"mdpIconsRegistry\", function($mdIconProvider, mdpIconsRegistry) {\r\n\tangular.forEach(mdpIconsRegistry, function(icon, index) {\r\n\t\t$mdIconProvider.icon(icon.id, icon.url);\r\n\t});\r\n}]);\r\n\r\nmodule.run([\"$templateCache\", \"mdpIconsRegistry\", function($templateCache, mdpIconsRegistry) {\r\n\tangular.forEach(mdpIconsRegistry, function(icon, index) {\r\n\t\t$templateCache.put(icon.url, icon.svg);\r\n\t});\r\n}]);\nmodule.constant(\"mdpIconsRegistry\", [\r\n    {\r\n        id: 'mdp-chevron-left',\r\n        url: 'mdp-chevron-left.svg',\r\n        svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>'\r\n    },\r\n    {\r\n        id: 'mdp-chevron-right',\r\n        url: 'mdp-chevron-right.svg',\r\n        svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>'\r\n    },\r\n    {\r\n        id: 'mdp-access-time',\r\n        url: 'mdp-access-time.svg',\r\n        svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\"/></svg>'\r\n    },\r\n    {\r\n        id: 'mdp-event',\r\n        url: 'mdp-event.svg',\r\n        svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>'\r\n    }\r\n]);\nmodule.directive(\"ngMessage\", [\"$mdUtil\", function($mdUtil) {\r\n   return {\r\n        restrict: \"EA\",\r\n        priority: 101,\r\n        compile: function(element) {\r\n            var inputContainer = $mdUtil.getClosest(element, \"mdp-time-picker\", true) ||\r\n                                 $mdUtil.getClosest(element, \"mdp-date-picker\", true);\r\n            \r\n            // If we are not a child of an input container, don't do anything\r\n            if (!inputContainer) return;\r\n            \r\n            // Add our animation class\r\n            element.toggleClass('md-input-message-animation', true);\r\n            \r\n            return {};\r\n        }\r\n    } \r\n}]);\n/* global moment, angular */\r\n\r\nfunction DatePickerCtrl($scope, $mdDialog, $mdMedia, $timeout, currentDate, options) {\r\n    var self = this;\r\n\r\n    this.date = moment(currentDate);\r\n    this.minDate = options.minDate && moment(options.minDate).isValid() ? moment(options.minDate) : null;\r\n    this.maxDate = options.maxDate && moment(options.maxDate).isValid() ? moment(options.maxDate) : null;\r\n    this.displayFormat = options.displayFormat || \"ddd, MMM DD\";\r\n    this.dateFilter = angular.isFunction(options.dateFilter) ? options.dateFilter : null;\r\n    this.confirmText= options.confirmText ? options.confirmText :\"OK\";\r\n    this.cancelText= options.cancelText ? options.cancelText :\"Cancel\";\r\n\r\n    this.selectingYear = false;\r\n\r\n    // validate min and max date\r\n\tif (this.minDate && this.maxDate) {\r\n\t\tif (this.maxDate.isBefore(this.minDate)) {\r\n\t\t\tthis.maxDate = moment(this.minDate).add(1, 'days');\r\n\t\t}\r\n\t}\r\n\r\n\tif (this.date) {\r\n\t\t// check min date\r\n    \tif (this.minDate && this.date.isBefore(this.minDate)) {\r\n\t\t\tthis.date = moment(this.minDate);\r\n    \t}\r\n\r\n    \t// check max date\r\n    \tif (this.maxDate && this.date.isAfter(this.maxDate)) {\r\n\t\t\tthis.date = moment(this.maxDate);\r\n    \t}\r\n\t}\r\n\r\n\tthis.yearItems = {\r\n        currentIndex_: 0,\r\n        PAGE_SIZE: 5,\r\n        START: (self.minDate ? self.minDate.year() : 1900),\r\n        END: (self.maxDate ? self.maxDate.year() : 0),\r\n        getItemAtIndex: function(index) {\r\n        \tif(this.currentIndex_ < index)\r\n                this.currentIndex_ = index;\r\n\r\n        \treturn this.START + index;\r\n        },\r\n        getLength: function() {\r\n            return Math.min(\r\n                this.currentIndex_ + Math.floor(this.PAGE_SIZE / 2),\r\n                Math.abs(this.START - this.END) + 1\r\n            );\r\n        }\r\n    };\r\n\r\n    $scope.$mdMedia = $mdMedia;\r\n    $scope.year = this.date.year();\r\n\r\n\tthis.selectYear = function(year) {\r\n        self.date.year(year);\r\n        $scope.year = year;\r\n        self.selectingYear = false;\r\n        self.animate();\r\n    };\r\n\r\n    this.showYear = function() {\r\n        self.yearTopIndex = (self.date.year() - self.yearItems.START) + Math.floor(self.yearItems.PAGE_SIZE / 2);\r\n        self.yearItems.currentIndex_ = (self.date.year() - self.yearItems.START) + 1;\r\n        self.selectingYear = true;\r\n    };\r\n\r\n    this.showCalendar = function() {\r\n        self.selectingYear = false;\r\n    };\r\n\r\n    this.cancel = function() {\r\n        $mdDialog.cancel();\r\n    };\r\n\r\n    this.confirm = function() {\r\n    \tvar date = this.date;\r\n\r\n    \tif (this.minDate && this.date.isBefore(this.minDate)) {\r\n    \t\tdate = moment(this.minDate);\r\n    \t}\r\n\r\n    \tif (this.maxDate && this.date.isAfter(this.maxDate)) {\r\n    \t\tdate = moment(this.maxDate);\r\n    \t}\r\n\r\n        $mdDialog.hide(date.toDate());\r\n    };\r\n\r\n    this.animate = function() {\r\n        self.animating = true;\r\n        $timeout(angular.noop).then(function() {\r\n            self.animating = false;\r\n        })\r\n    };\r\n}\r\n\r\nmodule.provider(\"$mdpDatePicker\", function() {\r\n    var DISPLAY_FORMAT = \"ddd, MMM DD\";\r\n\r\n    this.$get = [\"$mdDialog\", function($mdDialog) {\r\n        var datePicker = function(currentDate, options) {\r\n            if (!angular.isDate(currentDate)) currentDate = Date.now();\r\n            if (!angular.isObject(options)) options = {};\r\n\r\n            options.displayFormat = DISPLAY_FORMAT;\r\n\r\n            return $mdDialog.show({\r\n                controller:  ['$scope', '$mdDialog', '$mdMedia', '$timeout', 'currentDate', 'options', DatePickerCtrl],\r\n                controllerAs: 'datepicker',\r\n                clickOutsideToClose: true,\r\n                template: '<md-dialog aria-label=\"\" class=\"mdp-datepicker\" ng-class=\"{ \\'portrait\\': !$mdMedia(\\'gt-xs\\') }\">' +\r\n                            '<md-dialog-content layout=\"row\" layout-wrap>' +\r\n                                '<div layout=\"column\" layout-align=\"start center\">' +\r\n                                    '<md-toolbar layout-align=\"start start\" flex class=\"mdp-datepicker-date-wrapper md-hue-1 md-primary\" layout=\"column\">' +\r\n                                        '<span class=\"mdp-datepicker-year\" ng-click=\"datepicker.showYear()\" ng-class=\"{ \\'active\\': datepicker.selectingYear }\">{{ datepicker.date.format(\\'YYYY\\') }}</span>' +\r\n                                        '<span class=\"mdp-datepicker-date\" ng-click=\"datepicker.showCalendar()\" ng-class=\"{ \\'active\\': !datepicker.selectingYear }\">{{ datepicker.date.format(datepicker.displayFormat) }}</span> ' +\r\n                                    '</md-toolbar>' +\r\n                                '</div>' +\r\n                                '<div>' +\r\n                                    '<div class=\"mdp-datepicker-select-year mdp-animation-zoom\" layout=\"column\" layout-align=\"center start\" ng-if=\"datepicker.selectingYear\">' +\r\n                                        '<md-virtual-repeat-container md-auto-shrink md-top-index=\"datepicker.yearTopIndex\">' +\r\n                                            '<div flex md-virtual-repeat=\"item in datepicker.yearItems\" md-on-demand class=\"repeated-year\">' +\r\n                                                '<span class=\"md-button\" ng-click=\"datepicker.selectYear(item)\" md-ink-ripple ng-class=\"{ \\'md-primary current\\': item == year }\">{{ item }}</span>' +\r\n                                            '</div>' +\r\n                                        '</md-virtual-repeat-container>' +\r\n                                    '</div>' +\r\n                                    '<mdp-calendar ng-if=\"!datepicker.selectingYear\" class=\"mdp-animation-zoom\" date=\"datepicker.date\" min-date=\"datepicker.minDate\" date-filter=\"datepicker.dateFilter\" max-date=\"datepicker.maxDate\"></mdp-calendar>' +\r\n                                    '<md-dialog-actions layout=\"row\">' +\r\n                                    \t'<span flex></span>' +\r\n                                        '<md-button ng-click=\"datepicker.cancel()\" aria-label=\"{{datepicker.cancelText}}\">{{datepicker.cancelText}}</md-button>' +\r\n                                        '<md-button ng-click=\"datepicker.confirm()\" class=\"md-primary\" aria-label=\"{{datepicker.confirmText}}\">{{datepicker.confirmText}}</md-button>' +\r\n                                    '</md-dialog-actions>' +\r\n                                '</div>' +\r\n                            '</md-dialog-content>' +\r\n                        '</md-dialog>',\r\n                targetEvent: options.targetEvent,\r\n                locals: {\r\n                    currentDate: currentDate,\r\n                    options: options\r\n                },\r\n                skipHide: true\r\n            });\r\n        };\r\n\r\n        return datePicker;\r\n    }];\r\n});\r\n\r\nfunction CalendarCtrl($scope) {\r\n\tvar self = this;\r\n\tthis.dow = moment.localeData().firstDayOfWeek();\r\n\r\n    this.weekDays = [].concat(\r\n        moment.weekdaysMin().slice(\r\n            this.dow\r\n        ),\r\n        moment.weekdaysMin().slice(\r\n            0,\r\n            this.dow\r\n        )\r\n    );\r\n\r\n    this.daysInMonth = [];\r\n\r\n    this.getDaysInMonth = function() {\r\n        var days = self.date.daysInMonth(),\r\n            firstDay = moment(self.date).date(1).day() - this.dow;\r\n\r\n        if(firstDay < 0) firstDay = this.weekDays.length - 1;\r\n\r\n\r\n        var arr = [];\r\n        for(var i = 1; i <= (firstDay + days); i++) {\r\n            var day = null;\r\n            if(i > firstDay) {\r\n                day =  {\r\n                    value: (i - firstDay),\r\n                    enabled: self.isDayEnabled(moment(self.date).date(i - firstDay).toDate())\r\n                };\r\n            }\r\n            arr.push(day);\r\n        }\r\n\r\n        return arr;\r\n    };\r\n\r\n    this.isDayEnabled = function(day) {\r\n        return (!this.minDate || this.minDate <= day) &&\r\n            (!this.maxDate || this.maxDate >= day) &&\r\n            (!self.dateFilter || !self.dateFilter(day));\r\n    };\r\n\r\n    this.selectDate = function(dom) {\r\n        self.date.date(dom);\r\n    };\r\n\r\n    this.nextMonth = function() {\r\n        self.date.add(1, 'months');\r\n    };\r\n\r\n    this.prevMonth = function() {\r\n        self.date.subtract(1, 'months');\r\n    };\r\n\r\n    this.updateDaysInMonth = function() {\r\n        self.daysInMonth = self.getDaysInMonth();\r\n    };\r\n\r\n    $scope.$watch(function() { return  self.date.unix() }, function(newValue, oldValue) {\r\n        if(newValue && newValue !== oldValue)\r\n            self.updateDaysInMonth();\r\n    })\r\n\r\n    self.updateDaysInMonth();\r\n}\r\n\r\nmodule.directive(\"mdpCalendar\", [\"$animate\", function($animate) {\r\n    return {\r\n        restrict: 'E',\r\n        bindToController: {\r\n            \"date\": \"=\",\r\n            \"minDate\": \"=\",\r\n            \"maxDate\": \"=\",\r\n            \"dateFilter\": \"=\"\r\n        },\r\n        template: '<div class=\"mdp-calendar\">' +\r\n                    '<div layout=\"row\" layout-align=\"space-between center\">' +\r\n                        '<md-button aria-label=\"previous month\" class=\"md-icon-button\" ng-click=\"calendar.prevMonth()\"><md-icon md-svg-icon=\"mdp-chevron-left\"></md-icon></md-button>' +\r\n                        '<div class=\"mdp-calendar-monthyear\" ng-show=\"!calendar.animating\">{{ calendar.date.format(\"MMMM YYYY\") }}</div>' +\r\n                        '<md-button aria-label=\"next month\" class=\"md-icon-button\" ng-click=\"calendar.nextMonth()\"><md-icon md-svg-icon=\"mdp-chevron-right\"></md-icon></md-button>' +\r\n                    '</div>' +\r\n                    '<div layout=\"row\" layout-align=\"space-around center\" class=\"mdp-calendar-week-days\" ng-show=\"!calendar.animating\">' +\r\n                        '<div layout layout-align=\"center center\" ng-repeat=\"d in calendar.weekDays track by $index\">{{ d }}</div>' +\r\n                    '</div>' +\r\n                    '<div layout=\"row\" layout-align=\"start center\" layout-wrap class=\"mdp-calendar-days\" ng-class=\"{ \\'mdp-animate-next\\': calendar.animating }\" ng-show=\"!calendar.animating\" md-swipe-left=\"calendar.nextMonth()\" md-swipe-right=\"calendar.prevMonth()\">' +\r\n                        '<div layout layout-align=\"center center\" ng-repeat-start=\"day in calendar.daysInMonth track by $index\" ng-class=\"{ \\'mdp-day-placeholder\\': !day }\">' +\r\n                            '<md-button class=\"md-icon-button md-raised\" aria-label=\"Select day\" ng-if=\"day\" ng-class=\"{ \\'md-accent\\': calendar.date.date() == day.value }\" ng-click=\"calendar.selectDate(day.value)\" ng-disabled=\"!day.enabled\">{{ day.value }}</md-button>' +\r\n                        '</div>' +\r\n                        '<div flex=\"100\" ng-if=\"($index + 1) % 7 == 0\" ng-repeat-end></div>' +\r\n                    '</div>' +\r\n                '</div>',\r\n        controller: [\"$scope\", CalendarCtrl],\r\n        controllerAs: \"calendar\",\r\n        link: function(scope, element, attrs, ctrl) {\r\n            var animElements = [\r\n                element[0].querySelector(\".mdp-calendar-week-days\"),\r\n                element[0].querySelector('.mdp-calendar-days'),\r\n                element[0].querySelector('.mdp-calendar-monthyear')\r\n            ].map(function(a) {\r\n               return angular.element(a);\r\n            });\r\n\r\n            scope.$watch(function() { return  ctrl.date.format(\"YYYYMM\") }, function(newValue, oldValue) {\r\n                var direction = null;\r\n\r\n                if(newValue > oldValue)\r\n                    direction = \"mdp-animate-next\";\r\n                else if(newValue < oldValue)\r\n                    direction = \"mdp-animate-prev\";\r\n\r\n                if(direction) {\r\n                    for(var i in animElements) {\r\n                        animElements[i].addClass(direction);\r\n                        $animate.removeClass(animElements[i], direction);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n}]);\r\n\r\nfunction formatValidator(value, format) {\r\n    return !value || angular.isDate(value) || moment(value, format, true).isValid();\r\n}\r\n\r\nfunction minDateValidator(value, format, minDate) {\r\n    var minDate = moment(minDate, \"YYYY-MM-DD\", true);\r\n    var date = angular.isDate(value) ? moment(value) :  moment(value, format, true);\r\n\r\n    return !value ||\r\n            angular.isDate(value) ||\r\n            !minDate.isValid() ||\r\n            date.isSameOrAfter(minDate);\r\n}\r\n\r\nfunction maxDateValidator(value, format, maxDate) {\r\n    var maxDate = moment(maxDate, \"YYYY-MM-DD\", true);\r\n    var date = angular.isDate(value) ? moment(value) :  moment(value, format, true);\r\n\r\n    return !value ||\r\n            angular.isDate(value) ||\r\n            !maxDate.isValid() ||\r\n            date.isSameOrBefore(maxDate);\r\n}\r\n\r\nfunction filterValidator(value, format, filter) {\r\n    var date = angular.isDate(value) ? moment(value) :  moment(value, format, true);\r\n\r\n    return !value ||\r\n            angular.isDate(value) ||\r\n            !angular.isFunction(filter) ||\r\n            !filter(date);\r\n}\r\n\r\nfunction requiredValidator(value, ngModel) {\r\n    return value\r\n}\r\n\r\nmodule.directive(\"mdpDatePicker\", [\"$mdpDatePicker\", \"$timeout\", function($mdpDatePicker, $timeout) {\r\n    return  {\r\n        restrict: 'E',\r\n        require: 'ngModel',\r\n        transclude: true,\r\n        template: function(element, attrs) {\r\n            var noFloat = angular.isDefined(attrs.mdpNoFloat),\r\n                placeholder = angular.isDefined(attrs.mdpPlaceholder) ? attrs.mdpPlaceholder : \"\",\r\n                openOnClick = angular.isDefined(attrs.mdpOpenOnClick) ? true : false;\r\n\r\n            return '<div layout layout-align=\"start start\">' +\r\n                    '<md-button' + (angular.isDefined(attrs.mdpDisabled) ? ' ng-disabled=\"disabled\"' : '') + ' class=\"md-icon-button\" ng-click=\"showPicker($event)\">' +\r\n                        '<md-icon md-svg-icon=\"mdp-event\"></md-icon>' +\r\n                    '</md-button>' +\r\n                    '<md-input-container' + (noFloat ? ' md-no-float' : '') + ' md-is-error=\"isError()\">' +\r\n                        '<input type=\"text\"' + (angular.isDefined(attrs.mdpDisabled) ? ' ng-disabled=\"disabled\"' : '') + ' aria-label=\"' + placeholder + '\" placeholder=\"' + placeholder + '\"' + (openOnClick ? ' ng-click=\"showPicker($event)\" ' : '') + ' />' +\r\n                    '</md-input-container>' +\r\n                '</div>';\r\n        },\r\n        scope: {\r\n            \"minDate\": \"=mdpMinDate\",\r\n            \"maxDate\": \"=mdpMaxDate\",\r\n            \"dateFilter\": \"=mdpDateFilter\",\r\n            \"dateFormat\": \"@mdpFormat\",\r\n            \"placeholder\": \"@mdpPlaceholder\",\r\n            \"noFloat\": \"=mdpNoFloat\",\r\n            \"openOnClick\": \"=mdpOpenOnClick\",\r\n            \"disabled\": \"=?mdpDisabled\",\r\n            \"confirmText\": \"@mdpConfirmText\",\r\n            \"cancelText\": \"@mdpCancelText\"\r\n        },\r\n        link: {\r\n            pre: function(scope, element, attrs, ngModel, $transclude) {\r\n\r\n            },\r\n            post: function(scope, element, attrs, ngModel, $transclude) {\r\n                var inputElement = angular.element(element[0].querySelector('input')),\r\n                    inputContainer = angular.element(element[0].querySelector('md-input-container')),\r\n                    inputContainerCtrl = inputContainer.controller(\"mdInputContainer\");\r\n\r\n                $transclude(function(clone) {\r\n                   inputContainer.append(clone);\r\n                });\r\n\r\n                var messages = angular.element(inputContainer[0].querySelector(\"[ng-messages]\"));\r\n\r\n                scope.dateFormat = scope.dateFormat || \"YYYY-MM-DD\";\r\n                scope.model = ngModel;\r\n                scope.confirmText= scope.confirmText ? scope.confirmText :\"OK\";\r\n                scope.cancelText= scope.cancelText ? scope.cancelText :\"Cancel\";\r\n\r\n                scope.isError = function() {\r\n                    return !ngModel.$pristine && !!ngModel.$invalid;\r\n                };\r\n\r\n                // update input element if model has changed\r\n                ngModel.$formatters.unshift(function(value) {\r\n                    var date = angular.isDate(value) && moment(value);\r\n                    if(date && date.isValid())\r\n                        updateInputElement(date.format(scope.dateFormat));\r\n                    else\r\n                        updateInputElement(null);\r\n                });\r\n\r\n                ngModel.$validators.format = function(modelValue, viewValue) {\r\n                    return formatValidator(viewValue, scope.dateFormat);\r\n                };\r\n\r\n                ngModel.$validators.minDate = function(modelValue, viewValue) {\r\n                    return minDateValidator(viewValue, scope.dateFormat, scope.minDate);\r\n                };\r\n\r\n                ngModel.$validators.maxDate = function(modelValue, viewValue) {\r\n                    return maxDateValidator(viewValue, scope.dateFormat, scope.maxDate);\r\n                };\r\n\r\n                ngModel.$validators.filter = function(modelValue, viewValue) {\r\n                    return filterValidator(viewValue, scope.dateFormat, scope.dateFilter);\r\n                };\r\n\r\n                ngModel.$validators.required = function(modelValue, viewValue) {\r\n                    return angular.isUndefined(attrs.required) || !ngModel.$isEmpty(modelValue) || !ngModel.$isEmpty(viewValue);\r\n                };\r\n\r\n                ngModel.$parsers.unshift(function(value) {\r\n                    var parsed = moment(value, scope.dateFormat, true);\r\n                    if(parsed.isValid()) {\r\n                        if(angular.isDate(ngModel.$modelValue)) {\r\n                            var originalModel = moment(ngModel.$modelValue);\r\n                            originalModel.year(parsed.year());\r\n                            originalModel.month(parsed.month());\r\n                            originalModel.date(parsed.date());\r\n\r\n                            parsed = originalModel;\r\n                        }\r\n                        return parsed.toDate();\r\n                    } else\r\n                        return null;\r\n                });\r\n\r\n                // update input element value\r\n                function updateInputElement(value) {\r\n                    inputElement[0].value = value;\r\n                    inputContainerCtrl.setHasValue(!ngModel.$isEmpty(value));\r\n                }\r\n\r\n                function updateDate(date) {\r\n                    var value = moment(date, angular.isDate(date) ? null : scope.dateFormat, true),\r\n                        strValue = value.format(scope.dateFormat);\r\n\r\n                    if(value.isValid()) {\r\n                        updateInputElement(strValue);\r\n                        ngModel.$setViewValue(strValue);\r\n                    } else {\r\n                        updateInputElement(date);\r\n                        ngModel.$setViewValue(date);\r\n                    }\r\n\r\n                    if(!ngModel.$pristine &&\r\n                        messages.hasClass(\"md-auto-hide\") &&\r\n                        inputContainer.hasClass(\"md-input-invalid\")) messages.removeClass(\"md-auto-hide\");\r\n\r\n                    ngModel.$render();\r\n                }\r\n\r\n                scope.showPicker = function(ev) {\r\n                    $mdpDatePicker(ngModel.$modelValue, {\r\n                \t    minDate: scope.minDate,\r\n                \t    maxDate: scope.maxDate,\r\n                \t    dateFilter: scope.dateFilter,\r\n                \t    targetEvent: ev,\r\n                        confirmText: scope.confirmText,\r\n                        cancelText: scope.cancelText\r\n            \t    }).then(updateDate);\r\n                };\r\n\r\n                function onInputElementEvents(event) {\r\n                    if(event.target.value !== ngModel.$viewVaue)\r\n                        updateDate(event.target.value);\r\n                }\r\n\r\n                inputElement.on(\"reset input blur\", onInputElementEvents);\r\n\r\n                scope.$on(\"$destroy\", function() {\r\n                    inputElement.off(\"reset input blur\", onInputElementEvents);\r\n                });\r\n            }\r\n        }\r\n    };\r\n}]);\r\n\r\n\r\nmodule.directive(\"mdpDatePicker\", [\"$mdpDatePicker\", \"$timeout\", function($mdpDatePicker, $timeout) {\r\n    return  {\r\n        restrict: 'A',\r\n        require: 'ngModel',\r\n        scope: {\r\n            \"minDate\": \"@min\",\r\n            \"maxDate\": \"@max\",\r\n            \"dateFilter\": \"=mdpDateFilter\",\r\n            \"dateFormat\": \"@mdpFormat\",\r\n            \"confirmText\": \"@mdpConfirmText\",\r\n            \"cancelText\": \"@mdpCancelText\"\r\n        },\r\n        link: function(scope, element, attrs, ngModel, $transclude) {\r\n            scope.dateFormat = scope.dateFormat || \"YYYY-MM-DD\";\r\n            scope.confirmText= scope.confirmText;\r\n            scope.cancelText= scope.cancelText;\r\n\r\n            ngModel.$validators.format = function(modelValue, viewValue) {\r\n                return formatValidator(viewValue, scope.format);\r\n            };\r\n\r\n            ngModel.$validators.minDate = function(modelValue, viewValue) {\r\n                return minDateValidator(viewValue, scope.format, scope.minDate);\r\n            };\r\n\r\n            ngModel.$validators.maxDate = function(modelValue, viewValue) {\r\n                return maxDateValidator(viewValue, scope.format, scope.maxDate);\r\n            };\r\n\r\n            ngModel.$validators.filter = function(modelValue, viewValue) {\r\n                return filterValidator(viewValue, scope.format, scope.dateFilter);\r\n            };\r\n\r\n            function showPicker(ev) {\r\n                $mdpDatePicker(ngModel.$modelValue, {\r\n            \t    minDate: scope.minDate,\r\n            \t    maxDate: scope.maxDate,\r\n            \t    dateFilter: scope.dateFilter,\r\n            \t    targetEvent: ev,\r\n                    confirmText: scope.confirmText,\r\n                    cancelText: scope.cancelText\r\n        \t    }).then(function(time) {\r\n                    ngModel.$setViewValue(moment(time).format(scope.format));\r\n                    ngModel.$render();\r\n                });\r\n            };\r\n\r\n            element.on(\"click\", showPicker);\r\n\r\n            scope.$on(\"$destroy\", function() {\r\n                element.off(\"click\", showPicker);\r\n            });\r\n        }\r\n    }\r\n}]);\n/* global moment, angular */\r\n\r\nfunction TimePickerCtrl($scope, $mdDialog, time, autoSwitch, ampm, confirmText, cancelText, $mdMedia) {\r\n\tvar self = this;\r\n    this.VIEW_HOURS = 1;\r\n    this.VIEW_MINUTES = 2;\r\n    this.currentView = this.VIEW_HOURS;\r\n    this.time = moment(time);\r\n    this.autoSwitch = !!autoSwitch;\r\n    this.ampm = !!ampm;\r\n    this.confirmText= confirmText ? confirmText :\"OK\";\r\n    this.cancelText= cancelText ? cancelText :\"Cancel\";\r\n\r\n    this.hoursFormat = self.ampm ? \"h\" : \"H\";\r\n    this.minutesFormat = \"mm\";\r\n\r\n    this.clockHours = parseInt(this.time.format(this.hoursFormat));\r\n    this.clockMinutes = parseInt(this.time.format(this.minutesFormat));\r\n\r\n    $scope.$mdMedia = $mdMedia;\r\n\t\r\n    this.switchView = function() {\r\n        self.currentView = self.currentView == self.VIEW_HOURS ? self.VIEW_MINUTES : self.VIEW_HOURS;\r\n\t};\r\n    \r\n\tthis.setAM = function() {\r\n        if(self.time.hours() >= 12)\r\n            self.time.hour(self.time.hour() - 12);\r\n\t};\r\n    \r\n    this.setPM = function() {\r\n        if(self.time.hours() < 12)\r\n            self.time.hour(self.time.hour() + 12);\r\n\t};\r\n    \r\n    this.cancel = function() {\r\n        $mdDialog.cancel();\r\n    };\r\n\r\n    this.confirm = function() {\r\n        $mdDialog.hide(this.time.toDate());\r\n    };\r\n}\r\n\r\nfunction ClockCtrl($scope) {\r\n    var TYPE_HOURS = \"hours\";\r\n    var TYPE_MINUTES = \"minutes\";\r\n    var self = this;\r\n    \r\n    this.STEP_DEG = 360 / 12;\r\n    this.steps = [];\r\n    \r\n    this.CLOCK_TYPES = {\r\n        \"hours\": {\r\n            range: self.ampm ? 12 : 24,\r\n        },\r\n        \"minutes\": {\r\n            range: 60,\r\n        }\r\n    }\r\n    \r\n    this.getPointerStyle = function() {\r\n        var divider = 1;\r\n        switch(self.type) {\r\n            case TYPE_HOURS:\r\n                divider = self.ampm ? 12 : 24;\r\n                break;\r\n            case TYPE_MINUTES:\r\n                divider = 60;\r\n                break;\r\n        }  \r\n        var degrees = Math.round(self.selected * (360 / divider)) - 180;\r\n        return { \r\n            \"-webkit-transform\": \"rotate(\" + degrees + \"deg)\",\r\n            \"-ms-transform\": \"rotate(\" + degrees + \"deg)\",\r\n            \"transform\": \"rotate(\" + degrees + \"deg)\"\r\n        }\r\n    };\r\n    \r\n    this.setTimeByDeg = function(deg) {\r\n        deg = deg >= 360 ? 0 : deg;\r\n        var divider = 0;\r\n        switch(self.type) {\r\n            case TYPE_HOURS:\r\n                divider = self.ampm ? 12 : 24;\r\n                break;\r\n            case TYPE_MINUTES:\r\n                divider = 60;\r\n                break;\r\n        }  \r\n        \r\n        self.setTime(\r\n            Math.round(divider / 360 * deg)\r\n        );\r\n    };\r\n    \r\n    this.setTime = function(time, type) {\r\n        this.selected = time;\r\n        \r\n        switch(self.type) {\r\n            case TYPE_HOURS:\r\n                if(self.ampm && self.time.format(\"A\") == \"PM\") time += 12;\r\n                this.time.hours(time);\r\n                break;\r\n            case TYPE_MINUTES:\r\n                if(time > 59) time -= 60;\r\n                this.time.minutes(time);\r\n                break;\r\n        }\r\n        \r\n    };\r\n    \r\n    this.init = function() {\r\n        self.type = self.type || \"hours\";\r\n        switch(self.type) {\r\n            case TYPE_HOURS:\r\n                var f = self.ampm ? 1 : 2;\r\n                var t = self.ampm ? 12 : 23;\r\n                for(var i = f; i <= t; i+=f)\r\n                    self.steps.push(i);\r\n                if (!self.ampm) self.steps.push(0);\r\n                self.selected = self.time.hours() || 0;\r\n                if(self.ampm && self.selected > 12) self.selected -= 12;\r\n\r\n                break;\r\n            case TYPE_MINUTES:\r\n                for(var i = 5; i <= 55; i+=5)\r\n                    self.steps.push(i);\r\n                self.steps.push(0);\r\n                self.selected = self.time.minutes() || 0;\r\n\r\n                break;\r\n        }\r\n    };\r\n    \r\n    this.init();\r\n}\r\n\r\nmodule.directive(\"mdpClock\", [\"$animate\", \"$timeout\", function($animate, $timeout) {\r\n    return {\r\n        restrict: 'E',\r\n        bindToController: {\r\n            'type': '@?',\r\n            'time': '=',\r\n            'autoSwitch': '=?',\r\n            'ampm': '=?'\r\n        },\r\n        replace: true,\r\n        template: '<div class=\"mdp-clock\">' +\r\n                        '<div class=\"mdp-clock-container\">' +\r\n                            '<md-toolbar class=\"mdp-clock-center md-primary\"></md-toolbar>' +\r\n                            '<md-toolbar ng-style=\"clock.getPointerStyle()\" class=\"mdp-pointer md-primary\">' +\r\n                                '<span class=\"mdp-clock-selected md-button md-raised md-primary\"></span>' +\r\n                            '</md-toolbar>' +\r\n                            '<md-button ng-class=\"{ \\'md-primary\\': clock.selected == step }\" class=\"md-icon-button md-raised mdp-clock-deg{{ ::(clock.STEP_DEG * ($index + 1)) }}\" ng-repeat=\"step in clock.steps\" ng-click=\"clock.setTime(step)\">{{ step }}</md-button>' +\r\n                        '</div>' +\r\n                    '</div>',\r\n        controller: [\"$scope\", ClockCtrl],\r\n        controllerAs: \"clock\",\r\n        link: function(scope, element, attrs, ctrl) {\r\n            var pointer = angular.element(element[0].querySelector(\".mdp-pointer\")),\r\n                timepickerCtrl = scope.$parent.timepicker;\r\n            \r\n            var onEvent = function(event) {\r\n                var containerCoords = event.currentTarget.getClientRects()[0];\r\n                var x = ((event.currentTarget.offsetWidth / 2) - (event.pageX - containerCoords.left)),\r\n                    y = ((event.pageY - containerCoords.top) - (event.currentTarget.offsetHeight / 2));\r\n\r\n                var deg = Math.round((Math.atan2(x, y) * (180 / Math.PI)));\r\n                $timeout(function() {\r\n                    ctrl.setTimeByDeg(deg + 180);\r\n                    if(ctrl.autoSwitch && [\"mouseup\", \"click\"].indexOf(event.type) !== -1 && timepickerCtrl) timepickerCtrl.switchView();\r\n                });\r\n            }; \r\n            \r\n            element.on(\"mousedown\", function() {\r\n               element.on(\"mousemove\", onEvent);\r\n            });\r\n            \r\n            element.on(\"mouseup\", function(e) {\r\n                element.off(\"mousemove\");\r\n            });\r\n            \r\n            element.on(\"click\", onEvent);\r\n            scope.$on(\"$destroy\", function() {\r\n                element.off(\"click\", onEvent);\r\n                element.off(\"mousemove\", onEvent); \r\n            });\r\n        }\r\n    }\r\n}]);\r\n\r\nmodule.provider(\"$mdpTimePicker\", function() {\r\n\r\n    this.$get = [\"$mdDialog\", function($mdDialog) {\r\n        var timePicker = function(time, options) {\r\n            if(!angular.isDate(time)) time = Date.now();\r\n            if (!angular.isObject(options)) options = {};\r\n    \r\n            return $mdDialog.show({\r\n                controller:  ['$scope', '$mdDialog', 'time', 'autoSwitch', 'ampm', 'confirmText', 'cancelText', '$mdMedia', TimePickerCtrl],\r\n                controllerAs: 'timepicker',\r\n                clickOutsideToClose: true,\r\n                template: '<md-dialog aria-label=\"\" class=\"mdp-timepicker\" ng-class=\"{ \\'portrait\\': !$mdMedia(\\'gt-xs\\') }\">' +\r\n                            '<md-dialog-content layout-gt-xs=\"row\" layout-wrap>' +\r\n                                '<md-toolbar layout-gt-xs=\"column\" layout-xs=\"row\" layout-align=\"center center\" flex class=\"mdp-timepicker-time md-hue-1 md-primary\">' +\r\n                                    '<div class=\"mdp-timepicker-selected-time\">' +\r\n                                        '<span ng-class=\"{ \\'active\\': timepicker.currentView == timepicker.VIEW_HOURS }\" ng-click=\"timepicker.currentView = timepicker.VIEW_HOURS\">{{ timepicker.time.format(timepicker.hoursFormat) }}</span>:' + \r\n                                        '<span ng-class=\"{ \\'active\\': timepicker.currentView == timepicker.VIEW_MINUTES }\" ng-click=\"timepicker.currentView = timepicker.VIEW_MINUTES\">{{ timepicker.time.format(timepicker.minutesFormat) }}</span>' +\r\n                                    '</div>' +\r\n                                    '<div layout=\"column\" ng-show=\"timepicker.ampm\" class=\"mdp-timepicker-selected-ampm\">' + \r\n                                        '<span ng-click=\"timepicker.setAM()\" ng-class=\"{ \\'active\\': timepicker.time.hours() < 12 }\">AM</span>' +\r\n                                        '<span ng-click=\"timepicker.setPM()\" ng-class=\"{ \\'active\\': timepicker.time.hours() >= 12 }\">PM</span>' +\r\n                                    '</div>' + \r\n                                '</md-toolbar>' +\r\n                                '<div>' +\r\n                                    '<div class=\"mdp-clock-switch-container\" ng-switch=\"timepicker.currentView\" layout layout-align=\"center center\">' +\r\n\t                                    '<mdp-clock class=\"mdp-animation-zoom\" ampm=\"timepicker.ampm\" auto-switch=\"timepicker.autoSwitch\" time=\"timepicker.time\" type=\"hours\" ng-switch-when=\"1\"></mdp-clock>' +\r\n\t                                    '<mdp-clock class=\"mdp-animation-zoom\" ampm=\"timepicker.ampm\" auto-switch=\"timepicker.autoSwitch\" time=\"timepicker.time\" type=\"minutes\" ng-switch-when=\"2\"></mdp-clock>' +\r\n                                    '</div>' +\r\n                                    \r\n                                    '<md-dialog-actions layout=\"row\">' +\r\n\t                                \t'<span flex></span>' +\r\n                                        '<md-button ng-click=\"timepicker.cancel()\" aria-label=\"{{timepicker.cancelText}}\">{{timepicker.cancelText}}</md-button>' +\r\n                                        '<md-button ng-click=\"timepicker.confirm()\" class=\"md-primary\" aria-label=\"{{timepicker.confirmText}}\">{{timepicker.confirmText}}</md-button>' +\r\n                                    '</md-dialog-actions>' +\r\n                                '</div>' +\r\n                            '</md-dialog-content>' +\r\n                        '</md-dialog>',\r\n                targetEvent: options.targetEvent,\r\n                locals: {\r\n                    time: time,\r\n                    autoSwitch: options.autoSwitch,\r\n                    ampm: options.ampm,\r\n                    confirmText: options.confirmText,\r\n                    cancelText: options.cancelText\r\n                },\r\n                skipHide: true\r\n            });\r\n        };\r\n    \r\n        return timePicker;\r\n    }];\r\n});\r\n\r\nmodule.directive(\"mdpTimePicker\", [\"$mdpTimePicker\", \"$timeout\", function($mdpTimePicker, $timeout) {\r\n    return  {\r\n        restrict: 'E',\r\n        require: 'ngModel',\r\n        transclude: true,\r\n        template: function(element, attrs) {\r\n            var noFloat = angular.isDefined(attrs.mdpNoFloat),\r\n                placeholder = angular.isDefined(attrs.mdpPlaceholder) ? attrs.mdpPlaceholder : \"\",\r\n                openOnClick = angular.isDefined(attrs.mdpOpenOnClick) ? true : false;\r\n            \r\n            return '<div layout layout-align=\"start start\">' +\r\n                    '<md-button class=\"md-icon-button\" ng-click=\"showPicker($event)\"' + (angular.isDefined(attrs.mdpDisabled) ? ' ng-disabled=\"disabled\"' : '') + '>' +\r\n                        '<md-icon md-svg-icon=\"mdp-access-time\"></md-icon>' +\r\n                    '</md-button>' +\r\n                    '<md-input-container' + (noFloat ? ' md-no-float' : '') + ' md-is-error=\"isError()\">' +\r\n                        '<input type=\"{{ ::type }}\"' + (angular.isDefined(attrs.mdpDisabled) ? ' ng-disabled=\"disabled\"' : '') + ' aria-label=\"' + placeholder + '\" placeholder=\"' + placeholder + '\"' + (openOnClick ? ' ng-click=\"showPicker($event)\" ' : '') + ' />' +\r\n                    '</md-input-container>' +\r\n                '</div>';\r\n        },\r\n        scope: {\r\n            \"timeFormat\": \"@mdpFormat\",\r\n            \"placeholder\": \"@mdpPlaceholder\",\r\n            \"autoSwitch\": \"=?mdpAutoSwitch\",\r\n            \"disabled\": \"=?mdpDisabled\",\r\n            \"ampm\": \"=?mdpAmpm\",\r\n            \"confirmText\": \"@mdpConfirmText\",\r\n            \"cancelText\": \"@mdpCancelText\"\r\n        },\r\n        link: function(scope, element, attrs, ngModel, $transclude) {\r\n            var inputElement = angular.element(element[0].querySelector('input')),\r\n                inputContainer = angular.element(element[0].querySelector('md-input-container')),\r\n                inputContainerCtrl = inputContainer.controller(\"mdInputContainer\");\r\n\r\n            $transclude(function(clone) {\r\n               inputContainer.append(clone);\r\n            });\r\n\r\n            var messages = angular.element(inputContainer[0].querySelector(\"[ng-messages]\"));\r\n\r\n            scope.type = scope.timeFormat ? \"text\" : \"time\"\r\n            scope.timeFormat = scope.timeFormat || \"HH:mm\";\r\n            scope.autoSwitch = scope.autoSwitch || false;\r\n            scope.confirmText= scope.confirmText ? scope.confirmText :\"OK\";\r\n            scope.cancelText= scope.cancelText ? scope.cancelText :\"Cancel\";\r\n\r\n            scope.$watch(function() { return ngModel.$error }, function(newValue, oldValue) {\r\n                inputContainerCtrl.setInvalid(!ngModel.$pristine && !!Object.keys(ngModel.$error).length);\r\n            }, true);\r\n\r\n            // update input element if model has changed\r\n            ngModel.$formatters.unshift(function(value) {\r\n                var time = angular.isDate(value) && moment(value);\r\n                if(time && time.isValid())\r\n                    updateInputElement(time.format(scope.timeFormat));\r\n                else\r\n                    updateInputElement(null);\r\n            });\r\n\r\n            ngModel.$validators.format = function(modelValue, viewValue) {\r\n                return !viewValue || angular.isDate(viewValue) || moment(viewValue, scope.timeFormat, true).isValid();\r\n            };\r\n\r\n            ngModel.$validators.required = function(modelValue, viewValue) {\r\n                return angular.isUndefined(attrs.required) || !ngModel.$isEmpty(modelValue) || !ngModel.$isEmpty(viewValue);\r\n            };\r\n\r\n            ngModel.$parsers.unshift(function(value) {\r\n                var parsed = moment(value, scope.timeFormat, true);\r\n                if(parsed.isValid()) {\r\n                    if(angular.isDate(ngModel.$modelValue)) {\r\n                        var originalModel = moment(ngModel.$modelValue);\r\n                        originalModel.minutes(parsed.minutes());\r\n                        originalModel.hours(parsed.hours());\r\n                        originalModel.seconds(parsed.seconds());\r\n\r\n                        parsed = originalModel;\r\n                    }\r\n                    return parsed.toDate();\r\n                } else\r\n                    return null;\r\n            });\r\n\r\n            // update input element value\r\n            function updateInputElement(value) {\r\n                inputElement[0].value = value;\r\n                inputContainerCtrl.setHasValue(!ngModel.$isEmpty(value));\r\n            }\r\n\r\n            function updateTime(time) {\r\n                var value = moment(time, angular.isDate(time) ? null : scope.timeFormat, true),\r\n                    strValue = value.format(scope.timeFormat);\r\n\r\n                if(value.isValid()) {\r\n                    updateInputElement(strValue);\r\n                    ngModel.$setViewValue(strValue);\r\n                } else {\r\n                    updateInputElement(time);\r\n                    ngModel.$setViewValue(time);\r\n                }\r\n\r\n                if(!ngModel.$pristine &&\r\n                    messages.hasClass(\"md-auto-hide\") &&\r\n                    inputContainer.hasClass(\"md-input-invalid\")) messages.removeClass(\"md-auto-hide\");\r\n\r\n                ngModel.$render();\r\n            }\r\n\r\n            scope.showPicker = function(ev) {\r\n                $mdpTimePicker(ngModel.$modelValue, {\r\n                    targetEvent: ev,\r\n                    autoSwitch: scope.autoSwitch,\r\n                    ampm: scope.ampm,\r\n                    confirmText: scope.confirmText,\r\n                    cancelText: scope.cancelText\r\n                }).then(function(time) {\r\n                    updateTime(time, true);\r\n                });\r\n            };\r\n\r\n            function onInputElementEvents(event) {\r\n                if(event.target.value !== ngModel.$viewVaue)\r\n                    updateTime(event.target.value);\r\n            }\r\n\r\n            inputElement.on(\"reset input blur\", onInputElementEvents);\r\n\r\n            scope.$on(\"$destroy\", function() {\r\n                inputElement.off(\"reset input blur\", onInputElementEvents);\r\n            })\r\n        }\r\n    };\r\n}]);\r\n\r\nmodule.directive(\"mdpTimePicker\", [\"$mdpTimePicker\", \"$timeout\", function($mdpTimePicker, $timeout) {\r\n    return  {\r\n        restrict: 'A',\r\n        require: 'ngModel',\r\n        scope: {\r\n            \"timeFormat\": \"@mdpFormat\",\r\n            \"autoSwitch\": \"=?mdpAutoSwitch\",\r\n            \"ampm\": \"=?mdpAmpm\",\r\n            \"confirmText\": \"@mdpConfirmText\",\r\n            \"cancelText\": \"@mdpCancelText\"\r\n        },\r\n        link: function(scope, element, attrs, ngModel, $transclude) {\r\n            scope.format = scope.format || \"HH:mm\";\r\n            scope.confirmText= scope.confirmText;\r\n            scope.cancelText= scope.cancelText;\r\n            function showPicker(ev) {\r\n                $mdpTimePicker(ngModel.$modelValue, {\r\n                    targetEvent: ev,\r\n                    autoSwitch: scope.autoSwitch,\r\n                    ampm: scope.ampm,\r\n                    confirmText: scope.confirmText,\r\n                    cancelText: scope.cancelText\r\n                }).then(function(time) {\r\n                    ngModel.$setViewValue(moment(time).format(scope.format));\r\n                    ngModel.$render();\r\n                });\r\n            };\r\n            \r\n            element.on(\"click\", showPicker);\r\n            \r\n            scope.$on(\"$destroy\", function() {\r\n                element.off(\"click\", showPicker);\r\n            });\r\n        }\r\n    }\r\n}]);\r\n\n})();"]}